version: 2.1

parameters:
  cache-generation:
    type: integer
    default: 1

orbs:
  win: circleci/windows@5.0
  codecov: codecov/codecov@3

environment:
  PIP_PROGRESS_BAR: 'off'

jobs:
  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>

    steps:
      - checkout

      - run: &save-python-version
          name: Save full python version in file to be used as part of cache key
          command: python -V > /tmp/python-V.txt

      - restore_cache: &restore-cache-env
          key: &env-cache-key v<< pipeline.parameters.cache-generation >>-python-{{ checksum "/tmp/python-V.txt" }}-pip-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -V
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip
            pip install -U -r requirements.txt -r tests/requirements.txt

      - save_cache: &save-cache-env
          key: *env-cache-key
          paths:
            - env

      - run: &run-python-tests
          name: Run Python tests
          command: |
            . env/bin/activate
            coverage run -m unittest discover
            coverage xml

      - codecov/upload: &upload-python-code-coverage
          file: coverage.xml

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "16.0.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      - restore_cache: &restore-cache-pyenv
          key: &brew-pyenv-cache-key v<< pipeline.parameters.cache-generation >>-brew-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &brew-install-pyenv
          name: Install pyenv
          command: |
            brew update
            brew install pyenv

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            echo -e '\n\n# Initialize pyenv' >> ~/.bash_profile
            echo 'eval "$(pyenv init --path 2>/dev/null || true)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: *brew-pyenv-cache-key
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew
            - ~/.pyenv

      # install dependencies and cache them
      - run: *save-python-version

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *run-python-tests

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - run:
          name: Install python and create virtualenv
          shell: bash -eo pipefail
          command: |
            # de-normalize a pre-release version, because why would microsoft follow pep-440?
            version=$(sed -E 's/([[:digit:]])([[:alpha:]])/\1-\2/' \<<<"<< parameters.python-version >>")

            # resolve python MAJOR.MINOR[.PATCH[-PRERELEASE]] version to the latest
            # MAJOR.MINOR.PATCH version available on NuGet (ignoring the actual pre-release segment)
            # note: we rely on versions retrieved being sorted semantically!
            # (so '3.13' might resolve to '3.13.0rc3' before final release, and to '3.13.0' afterwards)
            full_version=$(
              curl -s 'https://azuresearch-usnc.nuget.org/query?q=python&prerelease=true' \
              | jq -r '.data[] | select(.id == "python") .versions[] | .version' \
              | awk -F'[.-]' -v ver="$version" \
                  'index($0, ver) == 1 && $3 >= m { m = $3; v = $0 } END { print v }'
            )

            nuget install python -Version "$full_version" -ExcludeVersion
            python/tools/python -V
            python/tools/python -m venv env

      - run:
          name: Install requirements
          command: |
            env\Scripts\activate.ps1
            pip install -U pip
            pip install -U -r requirements.txt -r tests\requirements.txt

      - run:
          name: Run tests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

  build-dist:
    docker:
      - image: python:3.12

    steps:
      - checkout

      - run: *create-virtualenv

      - run: *install-requirements

      - run:
          name: Install build deps
          command: env/bin/pip install build

      - run: &build-package
          name: Build package
          command: env/bin/python -m build

      - store_artifacts:
          path: ./dist

      - persist_to_workspace:
          root: ./dist
          paths: .

  pypi-deploy:
    docker:
      - image: python:3.12

    steps:
      - attach_workspace:
          at: ./dist

      - run:
          name: Upload package to PyPI
          command: |
            python -m venv env
            . env/bin/activate
            pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-py<< matrix.python-version >>
          context: &ctx-build "ocean-build"
          matrix:
            parameters:
              python-version: &python-versions ["3.9", "3.10", "3.11", "3.12", "3.13"]

      - test-macos:
          name: test-macos-py<< matrix.python-version >>
          context: *ctx-build
          matrix:
            parameters:
              python-version: *python-versions

      - test-windows:
          name: test-windows-py<< matrix.python-version >>
          context: *ctx-build
          matrix:
            parameters:
              python-version: *python-versions

      - build-dist

  deploy:
    jobs:
      - build-dist:
          filters: &on-tag
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/

      - pypi-deploy:
          context: ocean-publish
          requires:
            - build-dist
          filters: *on-tag
